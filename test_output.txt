=== Building Lexer with ocamllex ===
52 states, 469 transitions, table size 2188 bytes

=== Building Parser with menhir ===
File "parser.mly", line 15, characters 62-66:
Warning: the token BYTE is unused.
File "parser.mly", line 16, characters 48-51:
Warning: the token DOT is unused.
File "parser.mly", line 19, characters 35-43:
Warning: the token LBRACKET is unused.
File "parser.mly", line 15, characters 71-74:
Warning: the token LET is unused.
File "parser.mly", line 15, characters 75-78:
Warning: the token NEW is unused.
File "parser.mly", line 15, characters 67-70:
Warning: the token NIL is unused.
File "parser.mly", line 16, characters 35-47:
Warning: the token QUESTIONMARK is unused.
File "parser.mly", line 19, characters 44-52:
Warning: the token RBRACKET is unused.
File "parser.mly", line 16, characters 28-34:
Warning: the token RECORD is unused.
File "parser.mly", line 16, characters 16-22:
Warning: the token STRING is unused.
File "parser.mly", line 14, characters 16-26:
Warning: the token STRING_LIT is unused.

Building the project with dune...

Running tests in assignment-06-failing-tests...
---------------------------------------
Found test file: assignment-06-failing-tests/test01.dlp
Test #1: assignment-06-failing-tests/test01.dlp
Running compiler: _build/default/driver.exe assignment-06-failing-tests/test01.dlp
Lexical error at line 3, characters 8-27: Invalid integer literal
Test PASSED: Compiler reported an error as expected.

---------------------------------------
Found test file: assignment-06-failing-tests/test02.dlp
Test #2: assignment-06-failing-tests/test02.dlp
Running compiler: _build/default/driver.exe assignment-06-failing-tests/test02.dlp
Lexical error at line 3, characters 8-9: Unexpected character: "
Test PASSED: Compiler reported an error as expected.

---------------------------------------
Found test file: assignment-06-failing-tests/test03.dlp
Test #3: assignment-06-failing-tests/test03.dlp
Running compiler: _build/default/driver.exe assignment-06-failing-tests/test03.dlp
Parser error at line 3, character 5
Test PASSED: Compiler reported an error as expected.

---------------------------------------
Found test file: assignment-06-failing-tests/test04.dlp
Test #4: assignment-06-failing-tests/test04.dlp
Running compiler: _build/default/driver.exe assignment-06-failing-tests/test04.dlp
Lexical error at line 3, characters 11-12: Unexpected character: @
Test PASSED: Compiler reported an error as expected.

---------------------------------------
Found test file: assignment-06-failing-tests/test05.dlp
Test #5: assignment-06-failing-tests/test05.dlp
Running compiler: _build/default/driver.exe assignment-06-failing-tests/test05.dlp
Lexical error at line 5, characters 1-1: Unexpected end of file within a comment
Test PASSED: Compiler reported an error as expected.

---------------------------------------
Found test file: assignment-06-failing-tests/test06.dlp
Test #6: assignment-06-failing-tests/test06.dlp
Running compiler: _build/default/driver.exe assignment-06-failing-tests/test06.dlp
Parser error at line 4, character 3
Test PASSED: Compiler reported an error as expected.

---------------------------------------
Found test file: assignment-06-failing-tests/test07.dlp
Test #7: assignment-06-failing-tests/test07.dlp
Running compiler: _build/default/driver.exe assignment-06-failing-tests/test07.dlp
Parser error at line 4, character 20
Test PASSED: Compiler reported an error as expected.

---------------------------------------
Found test file: assignment-06-failing-tests/test08.dlp
Test #8: assignment-06-failing-tests/test08.dlp
Running compiler: _build/default/driver.exe assignment-06-failing-tests/test08.dlp
Parser error at line 4, character 4
Test PASSED: Compiler reported an error as expected.

---------------------------------------
Found test file: assignment-06-failing-tests/test09.dlp
Test #9: assignment-06-failing-tests/test09.dlp
Running compiler: _build/default/driver.exe assignment-06-failing-tests/test09.dlp
Parser error at line 3, character 4
Test PASSED: Compiler reported an error as expected.

---------------------------------------
Found test file: assignment-06-failing-tests/test10.dlp
Test #10: assignment-06-failing-tests/test10.dlp
Running compiler: _build/default/driver.exe assignment-06-failing-tests/test10.dlp
Parser error at line 3, character 24
Test PASSED: Compiler reported an error as expected.

---------------------------------------
Found test file: assignment-06-failing-tests/test11.dlp
Test #11: assignment-06-failing-tests/test11.dlp
Running compiler: _build/default/driver.exe assignment-06-failing-tests/test11.dlp
Parsing successful!
AST:
Program
└─Function
  ├─Name: main
  ├─Return Type: Int
  ├─Parameters
  └─Body
    ├─DeclStm: VarDecl
    │          └─Declaration
    │            ├─Ident: x
    │            ├─Type: 
    │            └─Body: IntLit(10)
    ├─ExprStm: Assignment
    │          ├─Var(x)
    │          └─BooleanLit(true)
    └─ReturnValStm: Lval
                    └─Var(x)
Semantic error: Type mismatch at line 4, characters 0-8: expected int but found bool
Test PASSED: Compiler reported an error as expected.

---------------------------------------
Found test file: assignment-06-failing-tests/test12.dlp
Test #12: assignment-06-failing-tests/test12.dlp
Running compiler: _build/default/driver.exe assignment-06-failing-tests/test12.dlp
Parser error at line 2, character 8
Test PASSED: Compiler reported an error as expected.

---------------------------------------
Found test file: assignment-06-failing-tests/test13.dlp
Test #13: assignment-06-failing-tests/test13.dlp
Running compiler: _build/default/driver.exe assignment-06-failing-tests/test13.dlp
Parser error at line 2, character 8
Test PASSED: Compiler reported an error as expected.

---------------------------------------
Found test file: assignment-06-failing-tests/test14.dlp
Test #14: assignment-06-failing-tests/test14.dlp
Running compiler: _build/default/driver.exe assignment-06-failing-tests/test14.dlp
Parsing successful!
AST:
Program
└─Function
  ├─Name: main
  ├─Return Type: Int
  ├─Parameters
  └─Body
    ├─DeclStm: VarDecl
    │          └─Declaration
    │            ├─Ident: x
    │            ├─Type: 
    │            └─Body: IntLit(10)
    ├─DeclStm: VarDecl
    │          └─Declaration
    │            ├─Ident: y
    │            ├─Type: 
    │            └─Body: BooleanLit(true)
    ├─ExprStm: Assignment
    │          ├─Var(x)
    │          └─BinOp
    │            ├─Lval
    │            │ └─Var(x)
    │            ├─PLUS
    │            └─Lval
    │              └─Var(y)
    └─ReturnValStm: IntLit(0)
Semantic error: Type mismatch at line 5, characters 4-9: expected int but found int
Test PASSED: Compiler reported an error as expected.

---------------------------------------
Found test file: assignment-06-failing-tests/test15.dlp
Test #15: assignment-06-failing-tests/test15.dlp
Running compiler: _build/default/driver.exe assignment-06-failing-tests/test15.dlp
Parsing successful!
AST:
Program
└─Function
  ├─Name: main
  ├─Return Type: Int
  ├─Parameters
  └─Body
    ├─DeclStm: VarDecl
    │          └─Declaration
    │            ├─Ident: x
    │            ├─Type: 
    │            └─Body: BooleanLit(true)
    └─ReturnValStm: Lval
                    └─Var(x)
Variables in environment:
  x 
Semantic error: Return type mismatch at line 2, character 0 to line 5, character 1: expected int but found bool
Test PASSED: Compiler reported an error as expected.

=======================================
Test Summary for assignment-06-failing-tests:
Total Tests Run: 15
Passed Tests:    15
Failed Tests:    0
=======================================
Running tests in assignment-06-passing-tests...
---------------------------------------
Found test file: assignment-06-passing-tests/test01.dlp
Test #1: assignment-06-passing-tests/test01.dlp
Running compiler: _build/default/driver.exe assignment-06-passing-tests/test01.dlp
Parsing successful!
AST:
Program
└─Function
  ├─Name: main
  ├─Return Type: Int
  ├─Parameters
  └─Body
    ├─DeclStm: VarDecl
    │          ├─Declaration
    │          │ ├─Ident: x
    │          │ ├─Type: 
    │          │ └─Body: IntLit(10)
    │          ├─Declaration
    │          │ ├─Ident: y
    │          │ ├─Type: 
    │          │ └─Body: IntLit(20)
    │          └─Declaration
    │            ├─Ident: z
    │            ├─Type: 
    │            └─Body: BinOp
    │                    ├─Lval
    │                    │ └─Var(x)
    │                    ├─PLUS
    │                    └─Lval
    │                      └─Var(y)
    └─ReturnValStm: Lval
                    └─Var(z)
Variables in environment:
  z 
  y 
  x 
Semantic analysis successful!
Typed AST:
Program
└─Functions
  └─Function
    ├─Name: main
    ├─Return Type: Int
    ├─Params
    └─Body
      ├─DeclStm: VarDecl
      │          ├─Declaration
      │          │ ├─Ident: x
      │          │ ├─Type: Int
      │          │ └─Body: IntLit(10)
      │          ├─Declaration
      │          │ ├─Ident: y
      │          │ ├─Type: Int
      │          │ └─Body: IntLit(20)
      │          └─Declaration
      │            ├─Ident: z
      │            ├─Type: Int
      │            └─Body: BinOp
      │                    ├─Int
      │                    ├─Lval
      │                    │ └─Var(x) : Int
      │                    ├─PLUS
      │                    └─Lval
      │                      └─Var(y) : Int
      └─ReturnValStm: Lval
                      └─Var(z) : Int
Code generation successful!
Generated Code:
declare i64 @read_integer()
declare void @print_integer(i64)

define i64 @dolphin_main () {
 %z3 = alloca i64
 %y2 = alloca i64
 %x1 = alloca i64
 store i64 10, i64* %x1
 store i64 20, i64* %y2
 %x_val4 = load i64, i64* %x1
 %y_val5 = load i64, i64* %y2
 %tmp6 = add i64 %x_val4, %y_val5
 store i64 %tmp6, i64* %z3
 %z_val7 = load i64, i64* %z3
 ret i64 %z_val7
}

Test PASSED: Compiler succeeded as expected.

---------------------------------------
Found test file: assignment-06-passing-tests/test02.dlp
Test #2: assignment-06-passing-tests/test02.dlp
Running compiler: _build/default/driver.exe assignment-06-passing-tests/test02.dlp
Parsing successful!
AST:
Program
└─Function
  ├─Name: main
  ├─Return Type: Int
  ├─Parameters
  └─Body
    ├─DeclStm: VarDecl
    │          └─Declaration
    │            ├─Ident: sum
    │            ├─Type: 
    │            └─Body: IntLit(0)
    ├─ForStm
    │ ├─Init: ForInitDecl: VarDecl
    │ │                    └─Declaration
    │ │                      ├─Ident: i
    │ │                      ├─Type: 
    │ │                      └─Body: IntLit(0)
    │ ├─Cond: BinOp
    │ │       ├─Lval
    │ │       │ └─Var(i)
    │ │       ├─Lt
    │ │       └─IntLit(10)
    │ ├─Update: Assignment
    │ │         ├─Var(i)
    │ │         └─BinOp
    │ │           ├─Lval
    │ │           │ └─Var(i)
    │ │           ├─PLUS
    │ │           └─IntLit(1)
    │ └─Body: CompoundStm
    │         └─CompoundStm
    │           ├─IfStm
    │           │ ├─Cond: BinOp
    │           │ │       ├─BinOp
    │           │ │       │ ├─Lval
    │           │ │       │ │ └─Var(i)
    │           │ │       │ ├─Rem
    │           │ │       │ └─IntLit(2)
    │           │ │       ├─Eq
    │           │ │       └─IntLit(0)
    │           │ └─Then-Branch: CompoundStm
    │           │                └─CompoundStm
    │           │                  └─ContinueStm
    │           ├─ExprStm: Assignment
    │           │          ├─Var(sum)
    │           │          └─BinOp
    │           │            ├─Lval
    │           │            │ └─Var(sum)
    │           │            ├─PLUS
    │           │            └─Lval
    │           │              └─Var(i)
    │           └─IfStm
    │             ├─Cond: BinOp
    │             │       ├─Lval
    │             │       │ └─Var(sum)
    │             │       ├─Gt
    │             │       └─IntLit(20)
    │             └─Then-Branch: CompoundStm
    │                            └─CompoundStm
    │                              └─BreakStm
    └─ReturnValStm: Lval
                    └─Var(sum)
Variables in environment:
  sum 
Semantic analysis successful!
Typed AST:
Program
└─Functions
  └─Function
    ├─Name: main
    ├─Return Type: Int
    ├─Params
    └─Body
      ├─DeclStm: VarDecl
      │          └─Declaration
      │            ├─Ident: sum
      │            ├─Type: Int
      │            └─Body: IntLit(0)
      ├─ForStm
      │ ├─Init: ForInitDecl: VarDecl
      │ │                    └─Declaration
      │ │                      ├─Ident: i
      │ │                      ├─Type: Int
      │ │                      └─Body: IntLit(0)
      │ ├─Cond: BinOp
      │ │       ├─Bool
      │ │       ├─Lval
      │ │       │ └─Var(i) : Int
      │ │       ├─Lt
      │ │       └─IntLit(10)
      │ ├─Update: Assignment
      │ │         ├─Int
      │ │         ├─Var(i) : Int
      │ │         └─BinOp
      │ │           ├─Int
      │ │           ├─Lval
      │ │           │ └─Var(i) : Int
      │ │           ├─PLUS
      │ │           └─IntLit(1)
      │ └─Body: CompoundStm
      │         └─CompoundStm
      │           ├─IfStm
      │           │ ├─Cond: BinOp
      │           │ │       ├─Bool
      │           │ │       ├─BinOp
      │           │ │       │ ├─Int
      │           │ │       │ ├─Lval
      │           │ │       │ │ └─Var(i) : Int
      │           │ │       │ ├─Rem
      │           │ │       │ └─IntLit(2)
      │           │ │       ├─Eq
      │           │ │       └─IntLit(0)
      │           │ └─Then-Branch: CompoundStm
      │           │                └─CompoundStm
      │           │                  └─ContinueStm
      │           ├─ExprStm: Assignment
      │           │          ├─Int
      │           │          ├─Var(sum) : Int
      │           │          └─BinOp
      │           │            ├─Int
      │           │            ├─Lval
      │           │            │ └─Var(sum) : Int
      │           │            ├─PLUS
      │           │            └─Lval
      │           │              └─Var(i) : Int
      │           └─IfStm
      │             ├─Cond: BinOp
      │             │       ├─Bool
      │             │       ├─Lval
      │             │       │ └─Var(sum) : Int
      │             │       ├─Gt
      │             │       └─IntLit(20)
      │             └─Then-Branch: CompoundStm
      │                            └─CompoundStm
      │                              └─BreakStm
      └─ReturnValStm: Lval
                      └─Var(sum) : Int
test1Code generation successful!
Generated Code:
declare i64 @read_integer()
declare void @print_integer(i64)

define i64 @dolphin_main () {
 %i2 = alloca i64
 %sum1 = alloca i64
 store i64 0, i64* %sum1
 store i64 0, i64* %i2
 br label %for_cond3
for_cond3:
 %i_val7 = load i64, i64* %i2
 %tmp8 = icmp slt i64 %i_val7, 10
 br i1 %tmp8, label %for_body4, label %for_end6
for_body4:
 %i_val9 = load i64, i64* %i2
 %tmp10 = srem i64 %i_val9, 2
 %tmp11 = icmp eq i64 %tmp10, 0
 br i1 %tmp11, label %then12, label %else13
then12:
 br label %for_update5
else13:
 br label %if_end14
if_end14:
 %sum_val15 = load i64, i64* %sum1
 %i_val16 = load i64, i64* %i2
 %tmp17 = add i64 %sum_val15, %i_val16
 store i64 %tmp17, i64* %sum1
 %sum_val18 = load i64, i64* %sum1
 %tmp19 = icmp sgt i64 %sum_val18, 20
 br i1 %tmp19, label %then20, label %else21
then20:
 br label %for_end6
else21:
 br label %if_end22
if_end22:
 br label %for_update5
for_update5:
 %i_val23 = load i64, i64* %i2
 %tmp24 = add i64 %i_val23, 1
 store i64 %tmp24, i64* %i2
 br label %for_cond3
for_end6:
 %sum_val25 = load i64, i64* %sum1
 ret i64 %sum_val25
}

Test PASSED: Compiler succeeded as expected.

---------------------------------------
Found test file: assignment-06-passing-tests/test03.dlp
Test #3: assignment-06-passing-tests/test03.dlp
Running compiler: _build/default/driver.exe assignment-06-passing-tests/test03.dlp
Parsing successful!
AST:
Program
└─Function
  ├─Name: main
  ├─Return Type: Int
  ├─Parameters
  └─Body
    ├─DeclStm: VarDecl
    │          └─Declaration
    │            ├─Ident: i
    │            ├─Type: 
    │            └─Body: IntLit(0)
    ├─WhileStm
    │ ├─Cond: BinOp
    │ │       ├─Lval
    │ │       │ └─Var(i)
    │ │       ├─Lt
    │ │       └─IntLit(3)
    │ └─Body: CompoundStm
    │         └─CompoundStm
    │           ├─DeclStm: VarDecl
    │           │          └─Declaration
    │           │            ├─Ident: j
    │           │            ├─Type: 
    │           │            └─Body: IntLit(0)
    │           ├─ForStm
    │           │ ├─Init: 
    │           │ ├─Cond: BinOp
    │           │ │       ├─Lval
    │           │ │       │ └─Var(j)
    │           │ │       ├─Lt
    │           │ │       └─IntLit(2)
    │           │ ├─Update: Assignment
    │           │ │         ├─Var(j)
    │           │ │         └─BinOp
    │           │ │           ├─Lval
    │           │ │           │ └─Var(j)
    │           │ │           ├─PLUS
    │           │ │           └─IntLit(1)
    │           │ └─Body: CompoundStm
    │           │         └─CompoundStm
    │           │           ├─ExprStm: Call
    │           │           │          ├─FunName: print_integer
    │           │           │          └─Args
    │           │           │            └─Lval
    │           │           │              └─Var(i)
    │           │           └─BreakStm
    │           └─ExprStm: Assignment
    │                      ├─Var(i)
    │                      └─BinOp
    │                        ├─Lval
    │                        │ └─Var(i)
    │                        ├─PLUS
    │                        └─IntLit(1)
    └─ReturnValStm: IntLit(0)
Variables in environment:
  i 
Semantic analysis successful!
Typed AST:
Program
└─Functions
  └─Function
    ├─Name: main
    ├─Return Type: Int
    ├─Params
    └─Body
      ├─DeclStm: VarDecl
      │          └─Declaration
      │            ├─Ident: i
      │            ├─Type: Int
      │            └─Body: IntLit(0)
      ├─WhileStm
      │ ├─Cond: BinOp
      │ │       ├─Bool
      │ │       ├─Lval
      │ │       │ └─Var(i) : Int
      │ │       ├─Lt
      │ │       └─IntLit(3)
      │ └─Body: CompoundStm
      │         └─CompoundStm
      │           ├─DeclStm: VarDecl
      │           │          └─Declaration
      │           │            ├─Ident: j
      │           │            ├─Type: Int
      │           │            └─Body: IntLit(0)
      │           ├─ForStm
      │           │ ├─Init: 
      │           │ ├─Cond: BinOp
      │           │ │       ├─Bool
      │           │ │       ├─Lval
      │           │ │       │ └─Var(j) : Int
      │           │ │       ├─Lt
      │           │ │       └─IntLit(2)
      │           │ ├─Update: Assignment
      │           │ │         ├─Int
      │           │ │         ├─Var(j) : Int
      │           │ │         └─BinOp
      │           │ │           ├─Int
      │           │ │           ├─Lval
      │           │ │           │ └─Var(j) : Int
      │           │ │           ├─PLUS
      │           │ │           └─IntLit(1)
      │           │ └─Body: CompoundStm
      │           │         └─CompoundStm
      │           │           ├─ExprStm: Call
      │           │           │          ├─Void
      │           │           │          ├─FunName: print_integer
      │           │           │          └─Args
      │           │           │            └─Lval
      │           │           │              └─Var(i) : Int
      │           │           └─BreakStm
      │           └─ExprStm: Assignment
      │                      ├─Int
      │                      ├─Var(i) : Int
      │                      └─BinOp
      │                        ├─Int
      │                        ├─Lval
      │                        │ └─Var(i) : Int
      │                        ├─PLUS
      │                        └─IntLit(1)
      └─ReturnValStm: IntLit(0)
test1Code generation successful!
Generated Code:
declare i64 @read_integer()
declare void @print_integer(i64)

define i64 @dolphin_main () {
 %j7 = alloca i64
 %i1 = alloca i64
 store i64 0, i64* %i1
 br label %while_cond2
while_cond2:
 %i_val5 = load i64, i64* %i1
 %tmp6 = icmp slt i64 %i_val5, 3
 br i1 %tmp6, label %while_body3, label %while_end4
while_body3:
 store i64 0, i64* %j7
 br label %for_cond8
for_cond8:
 %j_val12 = load i64, i64* %j7
 %tmp13 = icmp slt i64 %j_val12, 2
 br i1 %tmp13, label %for_body9, label %for_end11
for_body9:
 %i_val14 = load i64, i64* %i1
 call void @print_integer (i64 %i_val14)
 br label %for_end11
for_update10:
 %j_val15 = load i64, i64* %j7
 %tmp16 = add i64 %j_val15, 1
 store i64 %tmp16, i64* %j7
 br label %for_cond8
for_end11:
 %i_val17 = load i64, i64* %i1
 %tmp18 = add i64 %i_val17, 1
 store i64 %tmp18, i64* %i1
 br label %while_cond2
while_end4:
 ret i64 0
}

Test PASSED: Compiler succeeded as expected.

---------------------------------------
Found test file: assignment-06-passing-tests/test04.dlp
Test #4: assignment-06-passing-tests/test04.dlp
Running compiler: _build/default/driver.exe assignment-06-passing-tests/test04.dlp
Parsing successful!
AST:
Program
└─Function
  ├─Name: main
  ├─Return Type: Int
  ├─Parameters
  └─Body
    ├─DeclStm: VarDecl
    │          └─Declaration
    │            ├─Ident: i
    │            ├─Type: 
    │            └─Body: IntLit(0)
    ├─WhileStm
    │ ├─Cond: BinOp
    │ │       ├─Lval
    │ │       │ └─Var(i)
    │ │       ├─Lt
    │ │       └─IntLit(5)
    │ └─Body: CompoundStm
    │         └─CompoundStm
    │           ├─DeclStm: VarDecl
    │           │          └─Declaration
    │           │            ├─Ident: j
    │           │            ├─Type: 
    │           │            └─Body: IntLit(0)
    │           ├─WhileStm
    │           │ ├─Cond: BinOp
    │           │ │       ├─Lval
    │           │ │       │ └─Var(j)
    │           │ │       ├─Lt
    │           │ │       └─IntLit(5)
    │           │ └─Body: CompoundStm
    │           │         └─CompoundStm
    │           │           ├─IfStm
    │           │           │ ├─Cond: BinOp
    │           │           │ │       ├─Lval
    │           │           │ │       │ └─Var(j)
    │           │           │ │       ├─Eq
    │           │           │ │       └─IntLit(2)
    │           │           │ └─Then-Branch: CompoundStm
    │           │           │                └─CompoundStm
    │           │           │                  └─BreakStm
    │           │           └─ExprStm: Assignment
    │           │                      ├─Var(j)
    │           │                      └─BinOp
    │           │                        ├─Lval
    │           │                        │ └─Var(j)
    │           │                        ├─PLUS
    │           │                        └─IntLit(1)
    │           └─ExprStm: Assignment
    │                      ├─Var(i)
    │                      └─BinOp
    │                        ├─Lval
    │                        │ └─Var(i)
    │                        ├─PLUS
    │                        └─IntLit(1)
    └─ReturnValStm: IntLit(0)
Variables in environment:
  i 
Semantic analysis successful!
Typed AST:
Program
└─Functions
  └─Function
    ├─Name: main
    ├─Return Type: Int
    ├─Params
    └─Body
      ├─DeclStm: VarDecl
      │          └─Declaration
      │            ├─Ident: i
      │            ├─Type: Int
      │            └─Body: IntLit(0)
      ├─WhileStm
      │ ├─Cond: BinOp
      │ │       ├─Bool
      │ │       ├─Lval
      │ │       │ └─Var(i) : Int
      │ │       ├─Lt
      │ │       └─IntLit(5)
      │ └─Body: CompoundStm
      │         └─CompoundStm
      │           ├─DeclStm: VarDecl
      │           │          └─Declaration
      │           │            ├─Ident: j
      │           │            ├─Type: Int
      │           │            └─Body: IntLit(0)
      │           ├─WhileStm
      │           │ ├─Cond: BinOp
      │           │ │       ├─Bool
      │           │ │       ├─Lval
      │           │ │       │ └─Var(j) : Int
      │           │ │       ├─Lt
      │           │ │       └─IntLit(5)
      │           │ └─Body: CompoundStm
      │           │         └─CompoundStm
      │           │           ├─IfStm
      │           │           │ ├─Cond: BinOp
      │           │           │ │       ├─Bool
      │           │           │ │       ├─Lval
      │           │           │ │       │ └─Var(j) : Int
      │           │           │ │       ├─Eq
      │           │           │ │       └─IntLit(2)
      │           │           │ └─Then-Branch: CompoundStm
      │           │           │                └─CompoundStm
      │           │           │                  └─BreakStm
      │           │           └─ExprStm: Assignment
      │           │                      ├─Int
      │           │                      ├─Var(j) : Int
      │           │                      └─BinOp
      │           │                        ├─Int
      │           │                        ├─Lval
      │           │                        │ └─Var(j) : Int
      │           │                        ├─PLUS
      │           │                        └─IntLit(1)
      │           └─ExprStm: Assignment
      │                      ├─Int
      │                      ├─Var(i) : Int
      │                      └─BinOp
      │                        ├─Int
      │                        ├─Lval
      │                        │ └─Var(i) : Int
      │                        ├─PLUS
      │                        └─IntLit(1)
      └─ReturnValStm: IntLit(0)
Code generation successful!
Generated Code:
declare i64 @read_integer()
declare void @print_integer(i64)

define i64 @dolphin_main () {
 %j7 = alloca i64
 %i1 = alloca i64
 store i64 0, i64* %i1
 br label %while_cond2
while_cond2:
 %i_val5 = load i64, i64* %i1
 %tmp6 = icmp slt i64 %i_val5, 5
 br i1 %tmp6, label %while_body3, label %while_end4
while_body3:
 store i64 0, i64* %j7
 br label %while_cond8
while_cond8:
 %j_val11 = load i64, i64* %j7
 %tmp12 = icmp slt i64 %j_val11, 5
 br i1 %tmp12, label %while_body9, label %while_end10
while_body9:
 %j_val13 = load i64, i64* %j7
 %tmp14 = icmp eq i64 %j_val13, 2
 br i1 %tmp14, label %then15, label %else16
then15:
 br label %while_end10
else16:
 br label %if_end17
if_end17:
 %j_val18 = load i64, i64* %j7
 %tmp19 = add i64 %j_val18, 1
 store i64 %tmp19, i64* %j7
 br label %while_cond8
while_end10:
 %i_val20 = load i64, i64* %i1
 %tmp21 = add i64 %i_val20, 1
 store i64 %tmp21, i64* %i1
 br label %while_cond2
while_end4:
 ret i64 0
}

Test PASSED: Compiler succeeded as expected.

---------------------------------------
Found test file: assignment-06-passing-tests/test05.dlp
Test #5: assignment-06-passing-tests/test05.dlp
Running compiler: _build/default/driver.exe assignment-06-passing-tests/test05.dlp
Parsing successful!
AST:
Program
└─Function
  ├─Name: main
  ├─Return Type: Int
  ├─Parameters
  └─Body
    ├─DeclStm: VarDecl
    │          └─Declaration
    │            ├─Ident: a
    │            ├─Type: 
    │            └─Body: IntLit(1)
    ├─DeclStm: VarDecl
    │          └─Declaration
    │            ├─Ident: b
    │            ├─Type: 
    │            └─Body: IntLit(2)
    ├─ForStm
    │ ├─Init: ForInitExpr: Assignment
    │ │                    ├─Var(a)
    │ │                    └─IntLit(0)
    │ ├─Cond: BinOp
    │ │       ├─Lval
    │ │       │ └─Var(a)
    │ │       ├─Lt
    │ │       └─IntLit(5)
    │ ├─Update: Assignment
    │ │         ├─Var(a)
    │ │         └─BinOp
    │ │           ├─Lval
    │ │           │ └─Var(a)
    │ │           ├─PLUS
    │ │           └─IntLit(1)
    │ └─Body: CompoundStm
    │         └─CompoundStm
    │           └─WhileStm
    │             ├─Cond: BinOp
    │             │       ├─Lval
    │             │       │ └─Var(b)
    │             │       ├─Lt
    │             │       └─IntLit(5)
    │             └─Body: CompoundStm
    │                     └─CompoundStm
    │                       ├─IfStm
    │                       │ ├─Cond: BinOp
    │                       │ │       ├─Lval
    │                       │ │       │ └─Var(b)
    │                       │ │       ├─Eq
    │                       │ │       └─IntLit(3)
    │                       │ └─Then-Branch: CompoundStm
    │                       │                └─CompoundStm
    │                       │                  └─ContinueStm
    │                       └─ExprStm: Assignment
    │                                  ├─Var(b)
    │                                  └─BinOp
    │                                    ├─Lval
    │                                    │ └─Var(b)
    │                                    ├─PLUS
    │                                    └─IntLit(1)
    └─ReturnValStm: IntLit(0)
Variables in environment:
  b 
  a 
Semantic analysis successful!
Typed AST:
Program
└─Functions
  └─Function
    ├─Name: main
    ├─Return Type: Int
    ├─Params
    └─Body
      ├─DeclStm: VarDecl
      │          └─Declaration
      │            ├─Ident: a
      │            ├─Type: Int
      │            └─Body: IntLit(1)
      ├─DeclStm: VarDecl
      │          └─Declaration
      │            ├─Ident: b
      │            ├─Type: Int
      │            └─Body: IntLit(2)
      ├─ForStm
      │ ├─Init: ForInitExpr: Assignment
      │ │                    ├─Int
      │ │                    ├─Var(a) : Int
      │ │                    └─IntLit(0)
      │ ├─Cond: BinOp
      │ │       ├─Bool
      │ │       ├─Lval
      │ │       │ └─Var(a) : Int
      │ │       ├─Lt
      │ │       └─IntLit(5)
      │ ├─Update: Assignment
      │ │         ├─Int
      │ │         ├─Var(a) : Int
      │ │         └─BinOp
      │ │           ├─Int
      │ │           ├─Lval
      │ │           │ └─Var(a) : Int
      │ │           ├─PLUS
      │ │           └─IntLit(1)
      │ └─Body: CompoundStm
      │         └─CompoundStm
      │           └─WhileStm
      │             ├─Cond: BinOp
      │             │       ├─Bool
      │             │       ├─Lval
      │             │       │ └─Var(b) : Int
      │             │       ├─Lt
      │             │       └─IntLit(5)
      │             └─Body: CompoundStm
      │                     └─CompoundStm
      │                       ├─IfStm
      │                       │ ├─Cond: BinOp
      │                       │ │       ├─Bool
      │                       │ │       ├─Lval
      │                       │ │       │ └─Var(b) : Int
      │                       │ │       ├─Eq
      │                       │ │       └─IntLit(3)
      │                       │ └─Then-Branch: CompoundStm
      │                       │                └─CompoundStm
      │                       │                  └─ContinueStm
      │                       └─ExprStm: Assignment
      │                                  ├─Int
      │                                  ├─Var(b) : Int
      │                                  └─BinOp
      │                                    ├─Int
      │                                    ├─Lval
      │                                    │ └─Var(b) : Int
      │                                    ├─PLUS
      │                                    └─IntLit(1)
      └─ReturnValStm: IntLit(0)
test1Code generation successful!
Generated Code:
declare i64 @read_integer()
declare void @print_integer(i64)

define i64 @dolphin_main () {
 %b2 = alloca i64
 %a1 = alloca i64
 store i64 1, i64* %a1
 store i64 2, i64* %b2
 store i64 0, i64* %a1
 br label %for_cond3
for_cond3:
 %a_val7 = load i64, i64* %a1
 %tmp8 = icmp slt i64 %a_val7, 5
 br i1 %tmp8, label %for_body4, label %for_end6
for_body4:
 br label %while_cond9
while_cond9:
 %b_val12 = load i64, i64* %b2
 %tmp13 = icmp slt i64 %b_val12, 5
 br i1 %tmp13, label %while_body10, label %while_end11
while_body10:
 %b_val14 = load i64, i64* %b2
 %tmp15 = icmp eq i64 %b_val14, 3
 br i1 %tmp15, label %then16, label %else17
then16:
 br label %while_cond9
else17:
 br label %if_end18
if_end18:
 %b_val19 = load i64, i64* %b2
 %tmp20 = add i64 %b_val19, 1
 store i64 %tmp20, i64* %b2
 br label %while_cond9
while_end11:
 br label %for_update5
for_update5:
 %a_val21 = load i64, i64* %a1
 %tmp22 = add i64 %a_val21, 1
 store i64 %tmp22, i64* %a1
 br label %for_cond3
for_end6:
 ret i64 0
}

Test PASSED: Compiler succeeded as expected.

---------------------------------------
Found test file: assignment-06-passing-tests/test06.dlp
Test #6: assignment-06-passing-tests/test06.dlp
Running compiler: _build/default/driver.exe assignment-06-passing-tests/test06.dlp
Parsing successful!
AST:
Program
└─Function
  ├─Name: main
  ├─Return Type: Int
  ├─Parameters
  └─Body
    ├─DeclStm: VarDecl
    │          └─Declaration
    │            ├─Ident: x
    │            ├─Type: 
    │            └─Body: IntLit(10)
    ├─ExprStm: Assignment
    │          ├─Var(x)
    │          └─BinOp
    │            ├─Lval
    │            │ └─Var(x)
    │            ├─PLUS
    │            └─IntLit(20)
    └─ReturnValStm: Lval
                    └─Var(x)
Variables in environment:
  x 
Semantic analysis successful!
Typed AST:
Program
└─Functions
  └─Function
    ├─Name: main
    ├─Return Type: Int
    ├─Params
    └─Body
      ├─DeclStm: VarDecl
      │          └─Declaration
      │            ├─Ident: x
      │            ├─Type: Int
      │            └─Body: IntLit(10)
      ├─ExprStm: Assignment
      │          ├─Int
      │          ├─Var(x) : Int
      │          └─BinOp
      │            ├─Int
      │            ├─Lval
      │            │ └─Var(x) : Int
      │            ├─PLUS
      │            └─IntLit(20)
      └─ReturnValStm: Lval
                      └─Var(x) : Int
Code generation successful!
Generated Code:
declare i64 @read_integer()
declare void @print_integer(i64)

define i64 @dolphin_main () {
 %x1 = alloca i64
 store i64 10, i64* %x1
 %x_val2 = load i64, i64* %x1
 %tmp3 = add i64 %x_val2, 20
 store i64 %tmp3, i64* %x1
 %x_val4 = load i64, i64* %x1
 ret i64 %x_val4
}

Test PASSED: Compiler succeeded as expected.

---------------------------------------
Found test file: assignment-06-passing-tests/test07.dlp
Test #7: assignment-06-passing-tests/test07.dlp
Running compiler: _build/default/driver.exe assignment-06-passing-tests/test07.dlp
Parsing successful!
AST:
Program
└─Function
  ├─Name: main
  ├─Return Type: Int
  ├─Parameters
  └─Body
    ├─DeclStm: VarDecl
    │          └─Declaration
    │            ├─Ident: x
    │            ├─Type: 
    │            └─Body: IntLit(10)
    ├─DeclStm: VarDecl
    │          └─Declaration
    │            ├─Ident: y
    │            ├─Type: 
    │            └─Body: IntLit(20)
    ├─ExprStm: Assignment
    │          ├─Var(x)
    │          └─BinOp
    │            ├─Lval
    │            │ └─Var(x)
    │            ├─Mul
    │            └─Lval
    │              └─Var(y)
    └─ReturnValStm: Lval
                    └─Var(x)
Variables in environment:
  y 
  x 
Semantic analysis successful!
Typed AST:
Program
└─Functions
  └─Function
    ├─Name: main
    ├─Return Type: Int
    ├─Params
    └─Body
      ├─DeclStm: VarDecl
      │          └─Declaration
      │            ├─Ident: x
      │            ├─Type: Int
      │            └─Body: IntLit(10)
      ├─DeclStm: VarDecl
      │          └─Declaration
      │            ├─Ident: y
      │            ├─Type: Int
      │            └─Body: IntLit(20)
      ├─ExprStm: Assignment
      │          ├─Int
      │          ├─Var(x) : Int
      │          └─BinOp
      │            ├─Int
      │            ├─Lval
      │            │ └─Var(x) : Int
      │            ├─Mul
      │            └─Lval
      │              └─Var(y) : Int
      └─ReturnValStm: Lval
                      └─Var(x) : Int
Code generation successful!
Generated Code:
declare i64 @read_integer()
declare void @print_integer(i64)

define i64 @dolphin_main () {
 %y2 = alloca i64
 %x1 = alloca i64
 store i64 10, i64* %x1
 store i64 20, i64* %y2
 %x_val3 = load i64, i64* %x1
 %y_val4 = load i64, i64* %y2
 %tmp5 = mul i64 %x_val3, %y_val4
 store i64 %tmp5, i64* %x1
 %x_val6 = load i64, i64* %x1
 ret i64 %x_val6
}

Test PASSED: Compiler succeeded as expected.

---------------------------------------
Found test file: assignment-06-passing-tests/test08.dlp
Test #8: assignment-06-passing-tests/test08.dlp
Running compiler: _build/default/driver.exe assignment-06-passing-tests/test08.dlp
Parsing successful!
AST:
Program
└─Function
  ├─Name: main
  ├─Return Type: Int
  ├─Parameters
  └─Body
    ├─DeclStm: VarDecl
    │          └─Declaration
    │            ├─Ident: x
    │            ├─Type: 
    │            └─Body: IntLit(10)
    ├─IfStm
    │ ├─Cond: BinOp
    │ │       ├─Lval
    │ │       │ └─Var(x)
    │ │       ├─Lt
    │ │       └─IntLit(20)
    │ ├─Then-Branch: CompoundStm
    │ │              └─CompoundStm
    │ │                └─ExprStm: Assignment
    │ │                           ├─Var(x)
    │ │                           └─BinOp
    │ │                             ├─Lval
    │ │                             │ └─Var(x)
    │ │                             ├─PLUS
    │ │                             └─IntLit(7)
    │ └─Else-Branch: CompoundStm
    │                └─CompoundStm
    │                  └─ExprStm: Assignment
    │                             ├─Var(x)
    │                             └─BinOp
    │                               ├─Lval
    │                               │ └─Var(x)
    │                               ├─Minus
    │                               └─IntLit(5)
    └─ReturnValStm: Lval
                    └─Var(x)
Variables in environment:
  x 
Semantic analysis successful!
Typed AST:
Program
└─Functions
  └─Function
    ├─Name: main
    ├─Return Type: Int
    ├─Params
    └─Body
      ├─DeclStm: VarDecl
      │          └─Declaration
      │            ├─Ident: x
      │            ├─Type: Int
      │            └─Body: IntLit(10)
      ├─IfStm
      │ ├─Cond: BinOp
      │ │       ├─Bool
      │ │       ├─Lval
      │ │       │ └─Var(x) : Int
      │ │       ├─Lt
      │ │       └─IntLit(20)
      │ ├─Then-Branch: CompoundStm
      │ │              └─CompoundStm
      │ │                └─ExprStm: Assignment
      │ │                           ├─Int
      │ │                           ├─Var(x) : Int
      │ │                           └─BinOp
      │ │                             ├─Int
      │ │                             ├─Lval
      │ │                             │ └─Var(x) : Int
      │ │                             ├─PLUS
      │ │                             └─IntLit(7)
      │ └─Else-Branch: CompoundStm
      │                └─CompoundStm
      │                  └─ExprStm: Assignment
      │                             ├─Int
      │                             ├─Var(x) : Int
      │                             └─BinOp
      │                               ├─Int
      │                               ├─Lval
      │                               │ └─Var(x) : Int
      │                               ├─Minus
      │                               └─IntLit(5)
      └─ReturnValStm: Lval
                      └─Var(x) : Int
Code generation successful!
Generated Code:
declare i64 @read_integer()
declare void @print_integer(i64)

define i64 @dolphin_main () {
 %x1 = alloca i64
 store i64 10, i64* %x1
 %x_val2 = load i64, i64* %x1
 %tmp3 = icmp slt i64 %x_val2, 20
 br i1 %tmp3, label %then4, label %else5
then4:
 %x_val7 = load i64, i64* %x1
 %tmp8 = add i64 %x_val7, 7
 store i64 %tmp8, i64* %x1
 br label %if_end6
else5:
 %x_val9 = load i64, i64* %x1
 %tmp10 = sub i64 %x_val9, 5
 store i64 %tmp10, i64* %x1
 br label %if_end6
if_end6:
 %x_val11 = load i64, i64* %x1
 ret i64 %x_val11
}

Test PASSED: Compiler succeeded as expected.

---------------------------------------
Found test file: assignment-06-passing-tests/test09.dlp
Test #9: assignment-06-passing-tests/test09.dlp
Running compiler: _build/default/driver.exe assignment-06-passing-tests/test09.dlp
Parsing successful!
AST:
Program
└─Function
  ├─Name: main
  ├─Return Type: Int
  ├─Parameters
  └─Body
    ├─DeclStm: VarDecl
    │          └─Declaration
    │            ├─Ident: x
    │            ├─Type: 
    │            └─Body: IntLit(5)
    ├─CompoundStm
    │ └─CompoundStm
    │   ├─DeclStm: VarDecl
    │   │          └─Declaration
    │   │            ├─Ident: x
    │   │            ├─Type: 
    │   │            └─Body: IntLit(10)
    │   └─ExprStm: Call
    │              ├─FunName: print_integer
    │              └─Args
    │                └─Lval
    │                  └─Var(x)
    ├─ExprStm: Call
    │          ├─FunName: print_integer
    │          └─Args
    │            └─Lval
    │              └─Var(x)
    └─ReturnValStm: IntLit(0)
Variables in environment:
  x 
Semantic analysis successful!
Typed AST:
Program
└─Functions
  └─Function
    ├─Name: main
    ├─Return Type: Int
    ├─Params
    └─Body
      ├─DeclStm: VarDecl
      │          └─Declaration
      │            ├─Ident: x
      │            ├─Type: Int
      │            └─Body: IntLit(5)
      ├─CompoundStm
      │ └─CompoundStm
      │   ├─DeclStm: VarDecl
      │   │          └─Declaration
      │   │            ├─Ident: x
      │   │            ├─Type: Int
      │   │            └─Body: IntLit(10)
      │   └─ExprStm: Call
      │              ├─Void
      │              ├─FunName: print_integer
      │              └─Args
      │                └─Lval
      │                  └─Var(x) : Int
      ├─ExprStm: Call
      │          ├─Void
      │          ├─FunName: print_integer
      │          └─Args
      │            └─Lval
      │              └─Var(x) : Int
      └─ReturnValStm: IntLit(0)
Code generation successful!
Generated Code:
declare i64 @read_integer()
declare void @print_integer(i64)

define i64 @dolphin_main () {
 %x2 = alloca i64
 %x1 = alloca i64
 store i64 5, i64* %x1
 store i64 10, i64* %x2
 %x_val3 = load i64, i64* %x2
 call void @print_integer (i64 %x_val3)
 %x_val4 = load i64, i64* %x1
 call void @print_integer (i64 %x_val4)
 ret i64 0
}

Test PASSED: Compiler succeeded as expected.

---------------------------------------
Found test file: assignment-06-passing-tests/test10.dlp
Test #10: assignment-06-passing-tests/test10.dlp
Running compiler: _build/default/driver.exe assignment-06-passing-tests/test10.dlp
Parsing successful!
AST:
Program
└─Function
  ├─Name: main
  ├─Return Type: Int
  ├─Parameters
  └─Body
    ├─DeclStm: VarDecl
    │          └─Declaration
    │            ├─Ident: x
    │            ├─Type: 
    │            └─Body: BooleanLit(true)
    ├─DeclStm: VarDecl
    │          └─Declaration
    │            ├─Ident: y
    │            ├─Type: 
    │            └─Body: BooleanLit(false)
    ├─DeclStm: VarDecl
    │          └─Declaration
    │            ├─Ident: z
    │            ├─Type: 
    │            └─Body: BinOp
    │                    ├─Lval
    │                    │ └─Var(x)
    │                    ├─Lor
    │                    └─BinOp
    │                      ├─BinOp
    │                      │ ├─IntLit(1)
    │                      │ ├─Div
    │                      │ └─IntLit(0)
    │                      ├─Eq
    │                      └─IntLit(0)
    └─ReturnValStm: IntLit(0)
Variables in environment:
  z 
  y 
  x 
Semantic analysis successful!
Typed AST:
Program
└─Functions
  └─Function
    ├─Name: main
    ├─Return Type: Int
    ├─Params
    └─Body
      ├─DeclStm: VarDecl
      │          └─Declaration
      │            ├─Ident: x
      │            ├─Type: Bool
      │            └─Body: BooleanLit(true)
      ├─DeclStm: VarDecl
      │          └─Declaration
      │            ├─Ident: y
      │            ├─Type: Bool
      │            └─Body: BooleanLit(false)
      ├─DeclStm: VarDecl
      │          └─Declaration
      │            ├─Ident: z
      │            ├─Type: Bool
      │            └─Body: BinOp
      │                    ├─Bool
      │                    ├─Lval
      │                    │ └─Var(x) : Bool
      │                    ├─Lor
      │                    └─BinOp
      │                      ├─Bool
      │                      ├─BinOp
      │                      │ ├─Int
      │                      │ ├─IntLit(1)
      │                      │ ├─Div
      │                      │ └─IntLit(0)
      │                      ├─Eq
      │                      └─IntLit(0)
      └─ReturnValStm: IntLit(0)
Code generation successful!
Generated Code:
declare i64 @read_integer()
declare void @print_integer(i64)

define i64 @dolphin_main () {
 %z3 = alloca i1
 %y2 = alloca i1
 %x1 = alloca i1
 store i1 1, i1* %x1
 store i1 0, i1* %y2
 %tmp4 = alloca i1
 %x_val7 = load i1, i1* %x1
 store i1 %x_val7, i1* %tmp4
 br i1 %x_val7, label %end6, label %right_eval5
right_eval5:
 %tmp8 = sdiv i64 1, 0
 %tmp9 = icmp eq i64 %tmp8, 0
 store i1 %tmp9, i1* %tmp4
 br label %end6
end6:
 %tmp_val10 = load i1, i1* %tmp4
 store i1 %tmp_val10, i1* %z3
 ret i64 0
}

Test PASSED: Compiler succeeded as expected.

---------------------------------------
Found test file: assignment-06-passing-tests/test11.dlp
Test #11: assignment-06-passing-tests/test11.dlp
Running compiler: _build/default/driver.exe assignment-06-passing-tests/test11.dlp
Parsing successful!
AST:
Program
└─Function
  ├─Name: main
  ├─Return Type: Int
  ├─Parameters
  └─Body
    ├─DeclStm: VarDecl
    │          └─Declaration
    │            ├─Ident: x
    │            ├─Type: 
    │            └─Body: IntLit(5)
    ├─DeclStm: VarDecl
    │          └─Declaration
    │            ├─Ident: neg_x
    │            ├─Type: 
    │            └─Body: UnOp
    │                    ├─Neg
    │                    └─Lval
    │                      └─Var(x)
    └─ReturnValStm: Lval
                    └─Var(neg_x)
Variables in environment:
  neg_x 
  x 
Semantic analysis successful!
Typed AST:
Program
└─Functions
  └─Function
    ├─Name: main
    ├─Return Type: Int
    ├─Params
    └─Body
      ├─DeclStm: VarDecl
      │          └─Declaration
      │            ├─Ident: x
      │            ├─Type: Int
      │            └─Body: IntLit(5)
      ├─DeclStm: VarDecl
      │          └─Declaration
      │            ├─Ident: neg_x
      │            ├─Type: Int
      │            └─Body: UnOp
      │                    ├─Int
      │                    ├─Neg
      │                    └─Lval
      │                      └─Var(x) : Int
      └─ReturnValStm: Lval
                      └─Var(neg_x) : Int
Code generation successful!
Generated Code:
declare i64 @read_integer()
declare void @print_integer(i64)

define i64 @dolphin_main () {
 %neg_x2 = alloca i64
 %x1 = alloca i64
 store i64 5, i64* %x1
 %x_val3 = load i64, i64* %x1
 %tmp4 = sub i64 0, %x_val3
 store i64 %tmp4, i64* %neg_x2
 %neg_x_val5 = load i64, i64* %neg_x2
 ret i64 %neg_x_val5
}

Test PASSED: Compiler succeeded as expected.

---------------------------------------
Found test file: assignment-06-passing-tests/test12.dlp
Test #12: assignment-06-passing-tests/test12.dlp
Running compiler: _build/default/driver.exe assignment-06-passing-tests/test12.dlp
Parsing successful!
AST:
Program
└─Function
  ├─Name: main
  ├─Return Type: Int
  ├─Parameters
  └─Body
    ├─DeclStm: VarDecl
    │          └─Declaration
    │            ├─Ident: a
    │            ├─Type: 
    │            └─Body: IntLit(10)
    ├─DeclStm: VarDecl
    │          └─Declaration
    │            ├─Ident: b
    │            ├─Type: 
    │            └─Body: IntLit(20)
    ├─DeclStm: VarDecl
    │          └─Declaration
    │            ├─Ident: is_equal
    │            ├─Type: 
    │            └─Body: BinOp
    │                    ├─Lval
    │                    │ └─Var(a)
    │                    ├─Eq
    │                    └─Lval
    │                      └─Var(b)
    └─ReturnValStm: IntLit(0)
Variables in environment:
  is_equal 
  b 
  a 
Semantic analysis successful!
Typed AST:
Program
└─Functions
  └─Function
    ├─Name: main
    ├─Return Type: Int
    ├─Params
    └─Body
      ├─DeclStm: VarDecl
      │          └─Declaration
      │            ├─Ident: a
      │            ├─Type: Int
      │            └─Body: IntLit(10)
      ├─DeclStm: VarDecl
      │          └─Declaration
      │            ├─Ident: b
      │            ├─Type: Int
      │            └─Body: IntLit(20)
      ├─DeclStm: VarDecl
      │          └─Declaration
      │            ├─Ident: is_equal
      │            ├─Type: Bool
      │            └─Body: BinOp
      │                    ├─Bool
      │                    ├─Lval
      │                    │ └─Var(a) : Int
      │                    ├─Eq
      │                    └─Lval
      │                      └─Var(b) : Int
      └─ReturnValStm: IntLit(0)
Code generation successful!
Generated Code:
declare i64 @read_integer()
declare void @print_integer(i64)

define i64 @dolphin_main () {
 %is_equal3 = alloca i1
 %b2 = alloca i64
 %a1 = alloca i64
 store i64 10, i64* %a1
 store i64 20, i64* %b2
 %a_val4 = load i64, i64* %a1
 %b_val5 = load i64, i64* %b2
 %tmp6 = icmp eq i64 %a_val4, %b_val5
 store i1 %tmp6, i1* %is_equal3
 ret i64 0
}

Test PASSED: Compiler succeeded as expected.

---------------------------------------
Found test file: assignment-06-passing-tests/test13.dlp
Test #13: assignment-06-passing-tests/test13.dlp
Running compiler: _build/default/driver.exe assignment-06-passing-tests/test13.dlp
Parsing successful!
AST:
Program
└─Function
  ├─Name: main
  ├─Return Type: Int
  ├─Parameters
  └─Body
    ├─DeclStm: VarDecl
    │          └─Declaration
    │            ├─Ident: x
    │            ├─Type: 
    │            └─Body: Call
    │                    ├─FunName: read_integer
    │                    └─Args
    ├─ExprStm: Call
    │          ├─FunName: print_integer
    │          └─Args
    │            └─Lval
    │              └─Var(x)
    └─ReturnValStm: IntLit(0)
Variables in environment:
  x 
Semantic analysis successful!
Typed AST:
Program
└─Functions
  └─Function
    ├─Name: main
    ├─Return Type: Int
    ├─Params
    └─Body
      ├─DeclStm: VarDecl
      │          └─Declaration
      │            ├─Ident: x
      │            ├─Type: Int
      │            └─Body: Call
      │                    ├─Int
      │                    ├─FunName: read_integer
      │                    └─Args
      ├─ExprStm: Call
      │          ├─Void
      │          ├─FunName: print_integer
      │          └─Args
      │            └─Lval
      │              └─Var(x) : Int
      └─ReturnValStm: IntLit(0)
Code generation successful!
Generated Code:
declare i64 @read_integer()
declare void @print_integer(i64)

define i64 @dolphin_main () {
 %x1 = alloca i64
 %tmp2 = call i64 @read_integer ()
 store i64 %tmp2, i64* %x1
 %x_val3 = load i64, i64* %x1
 call void @print_integer (i64 %x_val3)
 ret i64 0
}

Test PASSED: Compiler succeeded as expected.

---------------------------------------
Found test file: assignment-06-passing-tests/test14.dlp
Test #14: assignment-06-passing-tests/test14.dlp
Running compiler: _build/default/driver.exe assignment-06-passing-tests/test14.dlp
Parsing successful!
AST:
Program
└─Function
  ├─Name: main
  ├─Return Type: Int
  ├─Parameters
  └─Body
    ├─DeclStm: VarDecl
    │          └─Declaration
    │            ├─Ident: x
    │            ├─Type: 
    │            └─Body: IntLit(15)
    ├─IfStm
    │ ├─Cond: BinOp
    │ │       ├─Lval
    │ │       │ └─Var(x)
    │ │       ├─Gt
    │ │       └─IntLit(10)
    │ └─Then-Branch: CompoundStm
    │                └─CompoundStm
    │                  └─IfStm
    │                    ├─Cond: BinOp
    │                    │       ├─Lval
    │                    │       │ └─Var(x)
    │                    │       ├─Lt
    │                    │       └─IntLit(20)
    │                    └─Then-Branch: CompoundStm
    │                                   └─CompoundStm
    │                                     └─ExprStm: Call
    │                                                ├─FunName: print_integer
    │                                                └─Args
    │                                                  └─Lval
    │                                                    └─Var(x)
    └─ReturnValStm: IntLit(0)
Variables in environment:
  x 
Semantic analysis successful!
Typed AST:
Program
└─Functions
  └─Function
    ├─Name: main
    ├─Return Type: Int
    ├─Params
    └─Body
      ├─DeclStm: VarDecl
      │          └─Declaration
      │            ├─Ident: x
      │            ├─Type: Int
      │            └─Body: IntLit(15)
      ├─IfStm
      │ ├─Cond: BinOp
      │ │       ├─Bool
      │ │       ├─Lval
      │ │       │ └─Var(x) : Int
      │ │       ├─Gt
      │ │       └─IntLit(10)
      │ └─Then-Branch: CompoundStm
      │                └─CompoundStm
      │                  └─IfStm
      │                    ├─Cond: BinOp
      │                    │       ├─Bool
      │                    │       ├─Lval
      │                    │       │ └─Var(x) : Int
      │                    │       ├─Lt
      │                    │       └─IntLit(20)
      │                    └─Then-Branch: CompoundStm
      │                                   └─CompoundStm
      │                                     └─ExprStm: Call
      │                                                ├─Void
      │                                                ├─FunName: print_integer
      │                                                └─Args
      │                                                  └─Lval
      │                                                    └─Var(x) : Int
      └─ReturnValStm: IntLit(0)
Code generation successful!
Generated Code:
declare i64 @read_integer()
declare void @print_integer(i64)

define i64 @dolphin_main () {
 %x1 = alloca i64
 store i64 15, i64* %x1
 %x_val2 = load i64, i64* %x1
 %tmp3 = icmp sgt i64 %x_val2, 10
 br i1 %tmp3, label %then4, label %else5
then4:
 %x_val7 = load i64, i64* %x1
 %tmp8 = icmp slt i64 %x_val7, 20
 br i1 %tmp8, label %then9, label %else10
then9:
 %x_val12 = load i64, i64* %x1
 call void @print_integer (i64 %x_val12)
 br label %if_end11
else10:
 br label %if_end11
if_end11:
 br label %if_end6
else5:
 br label %if_end6
if_end6:
 ret i64 0
}

Test PASSED: Compiler succeeded as expected.

---------------------------------------
Found test file: assignment-06-passing-tests/test15.dlp
Test #15: assignment-06-passing-tests/test15.dlp
Running compiler: _build/default/driver.exe assignment-06-passing-tests/test15.dlp
Parsing successful!
AST:
Program
└─Function
  ├─Name: main
  ├─Return Type: Int
  ├─Parameters
  └─Body
    ├─DeclStm: VarDecl
    │          └─Declaration
    │            ├─Ident: a
    │            ├─Type: 
    │            └─Body: IntLit(10)
    ├─DeclStm: VarDecl
    │          └─Declaration
    │            ├─Ident: b
    │            ├─Type: 
    │            └─Body: IntLit(3)
    ├─DeclStm: VarDecl
    │          └─Declaration
    │            ├─Ident: sum
    │            ├─Type: 
    │            └─Body: BinOp
    │                    ├─Lval
    │                    │ └─Var(a)
    │                    ├─PLUS
    │                    └─Lval
    │                      └─Var(b)
    ├─DeclStm: VarDecl
    │          └─Declaration
    │            ├─Ident: diff
    │            ├─Type: 
    │            └─Body: BinOp
    │                    ├─Lval
    │                    │ └─Var(a)
    │                    ├─Minus
    │                    └─Lval
    │                      └─Var(b)
    ├─DeclStm: VarDecl
    │          └─Declaration
    │            ├─Ident: prod
    │            ├─Type: 
    │            └─Body: BinOp
    │                    ├─Lval
    │                    │ └─Var(a)
    │                    ├─Mul
    │                    └─Lval
    │                      └─Var(b)
    ├─DeclStm: VarDecl
    │          └─Declaration
    │            ├─Ident: quot
    │            ├─Type: 
    │            └─Body: BinOp
    │                    ├─Lval
    │                    │ └─Var(a)
    │                    ├─Div
    │                    └─Lval
    │                      └─Var(b)
    ├─DeclStm: VarDecl
    │          └─Declaration
    │            ├─Ident: rem
    │            ├─Type: 
    │            └─Body: BinOp
    │                    ├─Lval
    │                    │ └─Var(a)
    │                    ├─Rem
    │                    └─Lval
    │                      └─Var(b)
    └─ReturnValStm: IntLit(0)
Variables in environment:
  rem 
  quot 
  prod 
  diff 
  sum 
  b 
  a 
Semantic analysis successful!
Typed AST:
Program
└─Functions
  └─Function
    ├─Name: main
    ├─Return Type: Int
    ├─Params
    └─Body
      ├─DeclStm: VarDecl
      │          └─Declaration
      │            ├─Ident: a
      │            ├─Type: Int
      │            └─Body: IntLit(10)
      ├─DeclStm: VarDecl
      │          └─Declaration
      │            ├─Ident: b
      │            ├─Type: Int
      │            └─Body: IntLit(3)
      ├─DeclStm: VarDecl
      │          └─Declaration
      │            ├─Ident: sum
      │            ├─Type: Int
      │            └─Body: BinOp
      │                    ├─Int
      │                    ├─Lval
      │                    │ └─Var(a) : Int
      │                    ├─PLUS
      │                    └─Lval
      │                      └─Var(b) : Int
      ├─DeclStm: VarDecl
      │          └─Declaration
      │            ├─Ident: diff
      │            ├─Type: Int
      │            └─Body: BinOp
      │                    ├─Int
      │                    ├─Lval
      │                    │ └─Var(a) : Int
      │                    ├─Minus
      │                    └─Lval
      │                      └─Var(b) : Int
      ├─DeclStm: VarDecl
      │          └─Declaration
      │            ├─Ident: prod
      │            ├─Type: Int
      │            └─Body: BinOp
      │                    ├─Int
      │                    ├─Lval
      │                    │ └─Var(a) : Int
      │                    ├─Mul
      │                    └─Lval
      │                      └─Var(b) : Int
      ├─DeclStm: VarDecl
      │          └─Declaration
      │            ├─Ident: quot
      │            ├─Type: Int
      │            └─Body: BinOp
      │                    ├─Int
      │                    ├─Lval
      │                    │ └─Var(a) : Int
      │                    ├─Div
      │                    └─Lval
      │                      └─Var(b) : Int
      ├─DeclStm: VarDecl
      │          └─Declaration
      │            ├─Ident: rem
      │            ├─Type: Int
      │            └─Body: BinOp
      │                    ├─Int
      │                    ├─Lval
      │                    │ └─Var(a) : Int
      │                    ├─Rem
      │                    └─Lval
      │                      └─Var(b) : Int
      └─ReturnValStm: IntLit(0)
Code generation successful!
Generated Code:
declare i64 @read_integer()
declare void @print_integer(i64)

define i64 @dolphin_main () {
 %rem19 = alloca i64
 %quot15 = alloca i64
 %prod11 = alloca i64
 %diff7 = alloca i64
 %sum3 = alloca i64
 %b2 = alloca i64
 %a1 = alloca i64
 store i64 10, i64* %a1
 store i64 3, i64* %b2
 %a_val4 = load i64, i64* %a1
 %b_val5 = load i64, i64* %b2
 %tmp6 = add i64 %a_val4, %b_val5
 store i64 %tmp6, i64* %sum3
 %a_val8 = load i64, i64* %a1
 %b_val9 = load i64, i64* %b2
 %tmp10 = sub i64 %a_val8, %b_val9
 store i64 %tmp10, i64* %diff7
 %a_val12 = load i64, i64* %a1
 %b_val13 = load i64, i64* %b2
 %tmp14 = mul i64 %a_val12, %b_val13
 store i64 %tmp14, i64* %prod11
 %a_val16 = load i64, i64* %a1
 %b_val17 = load i64, i64* %b2
 %tmp18 = sdiv i64 %a_val16, %b_val17
 store i64 %tmp18, i64* %quot15
 %a_val20 = load i64, i64* %a1
 %b_val21 = load i64, i64* %b2
 %tmp22 = srem i64 %a_val20, %b_val21
 store i64 %tmp22, i64* %rem19
 ret i64 0
}

Test PASSED: Compiler succeeded as expected.

=======================================
Test Summary for assignment-06-passing-tests:
Total Tests Run: 15
Passed Tests:    15
Failed Tests:    0
=======================================
Running tests in assignment-07-failing-tests...
---------------------------------------
Found test file: assignment-07-failing-tests/test07.dlp
Test #1: assignment-07-failing-tests/test07.dlp
Running compiler: _build/default/driver.exe assignment-07-failing-tests/test07.dlp
Parsing successful!
AST:
Program
├─Function
│ ├─Name: foo
│ ├─Return Type: Int
│ ├─Parameters
│ └─Body
│   └─ReturnValStm: IntLit(1)
├─Function
│ ├─Name: foo
│ ├─Return Type: Int
│ ├─Parameters
│ └─Body
│   └─ReturnValStm: IntLit(2)
└─Function
  ├─Name: main
  ├─Return Type: Int
  ├─Parameters
  └─Body
    └─ReturnValStm: Call
                    ├─FunName: foo
                    └─Args
Semantic error: Duplicate function 'foo' at line 6, character 0 to line 8, character 1
Test PASSED: Compiler reported an error as expected.

---------------------------------------
Found test file: assignment-07-failing-tests/test08.dlp
Test #2: assignment-07-failing-tests/test08.dlp
Running compiler: _build/default/driver.exe assignment-07-failing-tests/test08.dlp
Parser error at line 4, character 10
Test PASSED: Compiler reported an error as expected.

=======================================
Test Summary for assignment-07-failing-tests:
Total Tests Run: 2
Passed Tests:    2
Failed Tests:    0
=======================================
Running tests in assignment-07-passing-tests...
---------------------------------------
Found test file: assignment-07-passing-tests/test01.dlp
Test #1: assignment-07-passing-tests/test01.dlp
Running compiler: _build/default/driver.exe assignment-07-passing-tests/test01.dlp
Parsing successful!
AST:
Program
├─Function
│ ├─Name: add
│ ├─Return Type: Int
│ ├─Parameters
│ │ ├─Parameter
│ │ │ ├─x
│ │ │ └─Int
│ │ └─Parameter
│ │   ├─y
│ │   └─Int
│ └─Body
│   └─ReturnValStm: BinOp
│                   ├─Lval
│                   │ └─Var(x)
│                   ├─PLUS
│                   └─Lval
│                     └─Var(y)
└─Function
  ├─Name: main
  ├─Return Type: Int
  ├─Parameters
  └─Body
    ├─DeclStm: VarDecl
    │          └─Declaration
    │            ├─Ident: result
    │            ├─Type: Int
    │            └─Body: Call
    │                    ├─FunName: add
    │                    └─Args
    │                      ├─IntLit(5)
    │                      └─IntLit(10)
    └─ReturnValStm: Lval
                    └─Var(result)
Variables in environment:
  y 
  x 
Variables in environment:
  result 
Semantic analysis successful!
Typed AST:
Program
└─Functions
  ├─Function
  │ ├─Name: add
  │ ├─Return Type: Int
  │ ├─Params
  │ │ ├─x : Int
  │ │ └─y : Int
  │ └─Body
  │   └─ReturnValStm: BinOp
  │                   ├─Int
  │                   ├─Lval
  │                   │ └─Var(x) : Int
  │                   ├─PLUS
  │                   └─Lval
  │                     └─Var(y) : Int
  └─Function
    ├─Name: main
    ├─Return Type: Int
    ├─Params
    └─Body
      ├─DeclStm: VarDecl
      │          └─Declaration
      │            ├─Ident: result
      │            ├─Type: Int
      │            └─Body: Call
      │                    ├─Int
      │                    ├─FunName: add
      │                    └─Args
      │                      ├─IntLit(5)
      │                      └─IntLit(10)
      └─ReturnValStm: Lval
                      └─Var(result) : Int
Param 'x' found with UID x and Type i64
Param 'y' found with UID y and Type i64
Code generation successful!
Generated Code:
declare i64 @read_integer()
declare void @print_integer(i64)

define i64 @add (i64 %x, i64 %y) {
 %tmp1 = add i64 %x, %y
 ret i64 %tmp1
}

define i64 @dolphin_main () {
 %result2 = alloca i64
 %tmp3 = call i64 @add (i64 5, i64 10)
 store i64 %tmp3, i64* %result2
 %result_val4 = load i64, i64* %result2
 ret i64 %result_val4
}

Test PASSED: Compiler succeeded as expected.

---------------------------------------
Found test file: assignment-07-passing-tests/test02.dlp
Test #2: assignment-07-passing-tests/test02.dlp
Running compiler: _build/default/driver.exe assignment-07-passing-tests/test02.dlp
Parsing successful!
AST:
Program
└─Function
  ├─Name: main
  ├─Return Type: Int
  ├─Parameters
  └─Body
    ├─DeclStm: VarDecl
    │          └─Declaration
    │            ├─Ident: a
    │            ├─Type: Int
    │            └─Body: CommaExpr
    │                    ├─IntLit(1)
    │                    └─IntLit(2)
    ├─DeclStm: VarDecl
    │          └─Declaration
    │            ├─Ident: b
    │            ├─Type: Int
    │            └─Body: CommaExpr
    │                    ├─Assignment
    │                    │ ├─Var(a)
    │                    │ └─BinOp
    │                    │   ├─Lval
    │                    │   │ └─Var(a)
    │                    │   ├─PLUS
    │                    │   └─IntLit(3)
    │                    └─BinOp
    │                      ├─Lval
    │                      │ └─Var(a)
    │                      ├─Mul
    │                      └─IntLit(2)
    └─ReturnValStm: Lval
                    └─Var(b)
Variables in environment:
  b 
  a 
Semantic analysis successful!
Typed AST:
Program
└─Functions
  └─Function
    ├─Name: main
    ├─Return Type: Int
    ├─Params
    └─Body
      ├─DeclStm: VarDecl
      │          └─Declaration
      │            ├─Ident: a
      │            ├─Type: Int
      │            └─Body: CommaExpr : int
      │                    ├─IntLit(1)
      │                    └─IntLit(2)
      ├─DeclStm: VarDecl
      │          └─Declaration
      │            ├─Ident: b
      │            ├─Type: Int
      │            └─Body: CommaExpr : int
      │                    ├─Assignment
      │                    │ ├─Int
      │                    │ ├─Var(a) : Int
      │                    │ └─BinOp
      │                    │   ├─Int
      │                    │   ├─Lval
      │                    │   │ └─Var(a) : Int
      │                    │   ├─PLUS
      │                    │   └─IntLit(3)
      │                    └─BinOp
      │                      ├─Int
      │                      ├─Lval
      │                      │ └─Var(a) : Int
      │                      ├─Mul
      │                      └─IntLit(2)
      └─ReturnValStm: Lval
                      └─Var(b) : Int
Code generation successful!
Generated Code:
declare i64 @read_integer()
declare void @print_integer(i64)

define i64 @dolphin_main () {
 %b2 = alloca i64
 %a1 = alloca i64
 store i64 2, i64* %a1
 %a_val3 = load i64, i64* %a1
 %tmp4 = add i64 %a_val3, 3
 store i64 %tmp4, i64* %a1
 %a_val5 = load i64, i64* %a1
 %tmp6 = mul i64 %a_val5, 2
 store i64 %tmp6, i64* %b2
 %b_val7 = load i64, i64* %b2
 ret i64 %b_val7
}

Test PASSED: Compiler succeeded as expected.

---------------------------------------
Found test file: assignment-07-passing-tests/test03.dlp
Test #3: assignment-07-passing-tests/test03.dlp
Running compiler: _build/default/driver.exe assignment-07-passing-tests/test03.dlp
Parsing successful!
AST:
Program
├─Function
│ ├─Name: is_even
│ ├─Return Type: Int
│ ├─Parameters
│ │ └─Parameter
│ │   ├─x
│ │   └─Int
│ └─Body
│   └─IfStm
│     ├─Cond: BinOp
│     │       ├─Lval
│     │       │ └─Var(x)
│     │       ├─Eq
│     │       └─IntLit(0)
│     ├─Then-Branch: CompoundStm
│     │              └─CompoundStm
│     │                └─ReturnValStm: IntLit(1)
│     └─Else-Branch: CompoundStm
│                    └─CompoundStm
│                      └─ReturnValStm: Call
│                                      ├─FunName: is_odd
│                                      └─Args
│                                        └─BinOp
│                                          ├─Lval
│                                          │ └─Var(x)
│                                          ├─Minus
│                                          └─IntLit(1)
├─Function
│ ├─Name: is_odd
│ ├─Return Type: Int
│ ├─Parameters
│ │ └─Parameter
│ │   ├─x
│ │   └─Int
│ └─Body
│   └─IfStm
│     ├─Cond: BinOp
│     │       ├─Lval
│     │       │ └─Var(x)
│     │       ├─Eq
│     │       └─IntLit(0)
│     ├─Then-Branch: CompoundStm
│     │              └─CompoundStm
│     │                └─ReturnValStm: IntLit(0)
│     └─Else-Branch: CompoundStm
│                    └─CompoundStm
│                      └─ReturnValStm: Call
│                                      ├─FunName: is_even
│                                      └─Args
│                                        └─BinOp
│                                          ├─Lval
│                                          │ └─Var(x)
│                                          ├─Minus
│                                          └─IntLit(1)
└─Function
  ├─Name: main
  ├─Return Type: Int
  ├─Parameters
  └─Body
    └─ReturnValStm: Call
                    ├─FunName: is_even
                    └─Args
                      └─IntLit(4)
Variables in environment:
  x 
Variables in environment:
  x 
Variables in environment:
Semantic analysis successful!
Typed AST:
Program
└─Functions
  ├─Function
  │ ├─Name: is_even
  │ ├─Return Type: Int
  │ ├─Params
  │ │ └─x : Int
  │ └─Body
  │   └─IfStm
  │     ├─Cond: BinOp
  │     │       ├─Bool
  │     │       ├─Lval
  │     │       │ └─Var(x) : Int
  │     │       ├─Eq
  │     │       └─IntLit(0)
  │     ├─Then-Branch: CompoundStm
  │     │              └─CompoundStm
  │     │                └─ReturnValStm: IntLit(1)
  │     └─Else-Branch: CompoundStm
  │                    └─CompoundStm
  │                      └─ReturnValStm: Call
  │                                      ├─Int
  │                                      ├─FunName: is_odd
  │                                      └─Args
  │                                        └─BinOp
  │                                          ├─Int
  │                                          ├─Lval
  │                                          │ └─Var(x) : Int
  │                                          ├─Minus
  │                                          └─IntLit(1)
  ├─Function
  │ ├─Name: is_odd
  │ ├─Return Type: Int
  │ ├─Params
  │ │ └─x : Int
  │ └─Body
  │   └─IfStm
  │     ├─Cond: BinOp
  │     │       ├─Bool
  │     │       ├─Lval
  │     │       │ └─Var(x) : Int
  │     │       ├─Eq
  │     │       └─IntLit(0)
  │     ├─Then-Branch: CompoundStm
  │     │              └─CompoundStm
  │     │                └─ReturnValStm: IntLit(0)
  │     └─Else-Branch: CompoundStm
  │                    └─CompoundStm
  │                      └─ReturnValStm: Call
  │                                      ├─Int
  │                                      ├─FunName: is_even
  │                                      └─Args
  │                                        └─BinOp
  │                                          ├─Int
  │                                          ├─Lval
  │                                          │ └─Var(x) : Int
  │                                          ├─Minus
  │                                          └─IntLit(1)
  └─Function
    ├─Name: main
    ├─Return Type: Int
    ├─Params
    └─Body
      └─ReturnValStm: Call
                      ├─Int
                      ├─FunName: is_even
                      └─Args
                        └─IntLit(4)
Param 'x' found with UID x and Type i64
Param 'x' found with UID x and Type i64
Code generation successful!
Generated Code:
declare i64 @read_integer()
declare void @print_integer(i64)

define i64 @is_even (i64 %x) {
 %tmp1 = icmp eq i64 %x, 0
 br i1 %tmp1, label %then2, label %else3
then2:
 ret i64 1
else3:
 %tmp5 = sub i64 %x, 1
 %tmp6 = call i64 @is_odd (i64 %tmp5)
 ret i64 %tmp6
if_end4:
 ret i64 0
}

define i64 @is_odd (i64 %x) {
 %tmp7 = icmp eq i64 %x, 0
 br i1 %tmp7, label %then8, label %else9
then8:
 ret i64 0
else9:
 %tmp11 = sub i64 %x, 1
 %tmp12 = call i64 @is_even (i64 %tmp11)
 ret i64 %tmp12
if_end10:
 ret i64 0
}

define i64 @dolphin_main () {
 %tmp13 = call i64 @is_even (i64 4)
 ret i64 %tmp13
}

Test PASSED: Compiler succeeded as expected.

---------------------------------------
Found test file: assignment-07-passing-tests/test04.dlp
Test #4: assignment-07-passing-tests/test04.dlp
Running compiler: _build/default/driver.exe assignment-07-passing-tests/test04.dlp
Parsing successful!
AST:
Program
└─Function
  ├─Name: main
  ├─Return Type: Int
  ├─Parameters
  └─Body
    ├─DeclStm: VarDecl
    │          └─Declaration
    │            ├─Ident: x
    │            ├─Type: 
    │            └─Body: IntLit(0)
    ├─DeclStm: VarDecl
    │          └─Declaration
    │            ├─Ident: y
    │            ├─Type: 
    │            └─Body: IntLit(0)
    ├─ForStm
    │ ├─Init: ForInitDecl: VarDecl
    │ │                    └─Declaration
    │ │                      ├─Ident: i
    │ │                      ├─Type: 
    │ │                      └─Body: IntLit(0)
    │ ├─Cond: BinOp
    │ │       ├─Lval
    │ │       │ └─Var(i)
    │ │       ├─Lt
    │ │       └─IntLit(3)
    │ ├─Update: Assignment
    │ │         ├─Var(i)
    │ │         └─BinOp
    │ │           ├─Lval
    │ │           │ └─Var(i)
    │ │           ├─PLUS
    │ │           └─IntLit(1)
    │ └─Body: CompoundStm
    │         └─CompoundStm
    │           ├─ExprStm: Assignment
    │           │          ├─Var(x)
    │           │          └─BinOp
    │           │            ├─Lval
    │           │            │ └─Var(x)
    │           │            ├─PLUS
    │           │            └─Lval
    │           │              └─Var(i)
    │           └─ExprStm: Assignment
    │                      ├─Var(y)
    │                      └─BinOp
    │                        ├─Lval
    │                        │ └─Var(y)
    │                        ├─PLUS
    │                        └─IntLit(2)
    └─ReturnValStm: CommaExpr
                    ├─Lval
                    │ └─Var(x)
                    └─Lval
                      └─Var(y)
Variables in environment:
  y 
  x 
Semantic analysis successful!
Typed AST:
Program
└─Functions
  └─Function
    ├─Name: main
    ├─Return Type: Int
    ├─Params
    └─Body
      ├─DeclStm: VarDecl
      │          └─Declaration
      │            ├─Ident: x
      │            ├─Type: Int
      │            └─Body: IntLit(0)
      ├─DeclStm: VarDecl
      │          └─Declaration
      │            ├─Ident: y
      │            ├─Type: Int
      │            └─Body: IntLit(0)
      ├─ForStm
      │ ├─Init: ForInitDecl: VarDecl
      │ │                    └─Declaration
      │ │                      ├─Ident: i
      │ │                      ├─Type: Int
      │ │                      └─Body: IntLit(0)
      │ ├─Cond: BinOp
      │ │       ├─Bool
      │ │       ├─Lval
      │ │       │ └─Var(i) : Int
      │ │       ├─Lt
      │ │       └─IntLit(3)
      │ ├─Update: Assignment
      │ │         ├─Int
      │ │         ├─Var(i) : Int
      │ │         └─BinOp
      │ │           ├─Int
      │ │           ├─Lval
      │ │           │ └─Var(i) : Int
      │ │           ├─PLUS
      │ │           └─IntLit(1)
      │ └─Body: CompoundStm
      │         └─CompoundStm
      │           ├─ExprStm: Assignment
      │           │          ├─Int
      │           │          ├─Var(x) : Int
      │           │          └─BinOp
      │           │            ├─Int
      │           │            ├─Lval
      │           │            │ └─Var(x) : Int
      │           │            ├─PLUS
      │           │            └─Lval
      │           │              └─Var(i) : Int
      │           └─ExprStm: Assignment
      │                      ├─Int
      │                      ├─Var(y) : Int
      │                      └─BinOp
      │                        ├─Int
      │                        ├─Lval
      │                        │ └─Var(y) : Int
      │                        ├─PLUS
      │                        └─IntLit(2)
      └─ReturnValStm: CommaExpr : int
                      ├─Lval
                      │ └─Var(x) : Int
                      └─Lval
                        └─Var(y) : Int
test1Code generation successful!
Generated Code:
declare i64 @read_integer()
declare void @print_integer(i64)

define i64 @dolphin_main () {
 %i3 = alloca i64
 %y2 = alloca i64
 %x1 = alloca i64
 store i64 0, i64* %x1
 store i64 0, i64* %y2
 store i64 0, i64* %i3
 br label %for_cond4
for_cond4:
 %i_val8 = load i64, i64* %i3
 %tmp9 = icmp slt i64 %i_val8, 3
 br i1 %tmp9, label %for_body5, label %for_end7
for_body5:
 %x_val10 = load i64, i64* %x1
 %i_val11 = load i64, i64* %i3
 %tmp12 = add i64 %x_val10, %i_val11
 store i64 %tmp12, i64* %x1
 %y_val13 = load i64, i64* %y2
 %tmp14 = add i64 %y_val13, 2
 store i64 %tmp14, i64* %y2
 br label %for_update6
for_update6:
 %i_val15 = load i64, i64* %i3
 %tmp16 = add i64 %i_val15, 1
 store i64 %tmp16, i64* %i3
 br label %for_cond4
for_end7:
 %x_val17 = load i64, i64* %x1
 %y_val18 = load i64, i64* %y2
 ret i64 %y_val18
}

Test PASSED: Compiler succeeded as expected.

---------------------------------------
Found test file: assignment-07-passing-tests/test05.dlp
Test #5: assignment-07-passing-tests/test05.dlp
Running compiler: _build/default/driver.exe assignment-07-passing-tests/test05.dlp
Parsing successful!
AST:
Program
└─Function
  ├─Name: main
  ├─Return Type: Int
  ├─Parameters
  └─Body
    ├─DeclStm: VarDecl
    │          └─Declaration
    │            ├─Ident: x
    │            ├─Type: Int
    │            └─Body: IntLit(5)
    ├─DeclStm: VarDecl
    │          └─Declaration
    │            ├─Ident: y
    │            ├─Type: Int
    │            └─Body: CommaExpr
    │                    ├─BinOp
    │                    │ ├─Lval
    │                    │ │ └─Var(x)
    │                    │ ├─Gt
    │                    │ └─IntLit(0)
    │                    └─BinOp
    │                      ├─Lval
    │                      │ └─Var(x)
    │                      ├─Mul
    │                      └─IntLit(2)
    └─ReturnValStm: Lval
                    └─Var(y)
Variables in environment:
  y 
  x 
Semantic analysis successful!
Typed AST:
Program
└─Functions
  └─Function
    ├─Name: main
    ├─Return Type: Int
    ├─Params
    └─Body
      ├─DeclStm: VarDecl
      │          └─Declaration
      │            ├─Ident: x
      │            ├─Type: Int
      │            └─Body: IntLit(5)
      ├─DeclStm: VarDecl
      │          └─Declaration
      │            ├─Ident: y
      │            ├─Type: Int
      │            └─Body: CommaExpr : int
      │                    ├─BinOp
      │                    │ ├─Bool
      │                    │ ├─Lval
      │                    │ │ └─Var(x) : Int
      │                    │ ├─Gt
      │                    │ └─IntLit(0)
      │                    └─BinOp
      │                      ├─Int
      │                      ├─Lval
      │                      │ └─Var(x) : Int
      │                      ├─Mul
      │                      └─IntLit(2)
      └─ReturnValStm: Lval
                      └─Var(y) : Int
Code generation successful!
Generated Code:
declare i64 @read_integer()
declare void @print_integer(i64)

define i64 @dolphin_main () {
 %y2 = alloca i64
 %x1 = alloca i64
 store i64 5, i64* %x1
 %x_val3 = load i64, i64* %x1
 %tmp4 = icmp sgt i64 %x_val3, 0
 %x_val5 = load i64, i64* %x1
 %tmp6 = mul i64 %x_val5, 2
 store i64 %tmp6, i64* %y2
 %y_val7 = load i64, i64* %y2
 ret i64 %y_val7
}

Test PASSED: Compiler succeeded as expected.

---------------------------------------
Found test file: assignment-07-passing-tests/test06.dlp
Test #6: assignment-07-passing-tests/test06.dlp
Running compiler: _build/default/driver.exe assignment-07-passing-tests/test06.dlp
Parsing successful!
AST:
Program
├─Function
│ ├─Name: multiply
│ ├─Return Type: Int
│ ├─Parameters
│ │ ├─Parameter
│ │ │ ├─a
│ │ │ └─Int
│ │ └─Parameter
│ │   ├─b
│ │   └─Int
│ └─Body
│   └─ReturnValStm: BinOp
│                   ├─Lval
│                   │ └─Var(a)
│                   ├─Mul
│                   └─Lval
│                     └─Var(b)
└─Function
  ├─Name: main
  ├─Return Type: Int
  ├─Parameters
  └─Body
    ├─DeclStm: VarDecl
    │          └─Declaration
    │            ├─Ident: product
    │            ├─Type: Int
    │            └─Body: Call
    │                    ├─FunName: multiply
    │                    └─Args
    │                      ├─IntLit(4)
    │                      └─IntLit(5)
    └─ReturnValStm: Lval
                    └─Var(product)
Variables in environment:
  b 
  a 
Variables in environment:
  product 
Semantic analysis successful!
Typed AST:
Program
└─Functions
  ├─Function
  │ ├─Name: multiply
  │ ├─Return Type: Int
  │ ├─Params
  │ │ ├─a : Int
  │ │ └─b : Int
  │ └─Body
  │   └─ReturnValStm: BinOp
  │                   ├─Int
  │                   ├─Lval
  │                   │ └─Var(a) : Int
  │                   ├─Mul
  │                   └─Lval
  │                     └─Var(b) : Int
  └─Function
    ├─Name: main
    ├─Return Type: Int
    ├─Params
    └─Body
      ├─DeclStm: VarDecl
      │          └─Declaration
      │            ├─Ident: product
      │            ├─Type: Int
      │            └─Body: Call
      │                    ├─Int
      │                    ├─FunName: multiply
      │                    └─Args
      │                      ├─IntLit(4)
      │                      └─IntLit(5)
      └─ReturnValStm: Lval
                      └─Var(product) : Int
Param 'a' found with UID a and Type i64
Param 'b' found with UID b and Type i64
Code generation successful!
Generated Code:
declare i64 @read_integer()
declare void @print_integer(i64)

define i64 @multiply (i64 %a, i64 %b) {
 %tmp1 = mul i64 %a, %b
 ret i64 %tmp1
}

define i64 @dolphin_main () {
 %product2 = alloca i64
 %tmp3 = call i64 @multiply (i64 4, i64 5)
 store i64 %tmp3, i64* %product2
 %product_val4 = load i64, i64* %product2
 ret i64 %product_val4
}

Test PASSED: Compiler succeeded as expected.

---------------------------------------
Found test file: assignment-07-passing-tests/test09.dlp
Test #7: assignment-07-passing-tests/test09.dlp
Running compiler: _build/default/driver.exe assignment-07-passing-tests/test09.dlp
Parsing successful!
AST:
Program
└─Function
  ├─Name: main
  ├─Return Type: Int
  ├─Parameters
  └─Body
    ├─DeclStm: VarDecl
    │          └─Declaration
    │            ├─Ident: a
    │            ├─Type: Int
    │            └─Body: IntLit(1)
    ├─DeclStm: VarDecl
    │          └─Declaration
    │            ├─Ident: b
    │            ├─Type: Int
    │            └─Body: IntLit(2)
    └─ReturnValStm: CommaExpr
                    ├─Assignment
                    │ ├─Var(a)
                    │ └─BinOp
                    │   ├─Lval
                    │   │ └─Var(a)
                    │   ├─PLUS
                    │   └─Lval
                    │     └─Var(b)
                    └─BinOp
                      ├─Lval
                      │ └─Var(a)
                      ├─Mul
                      └─Lval
                        └─Var(b)
Variables in environment:
  b 
  a 
Semantic analysis successful!
Typed AST:
Program
└─Functions
  └─Function
    ├─Name: main
    ├─Return Type: Int
    ├─Params
    └─Body
      ├─DeclStm: VarDecl
      │          └─Declaration
      │            ├─Ident: a
      │            ├─Type: Int
      │            └─Body: IntLit(1)
      ├─DeclStm: VarDecl
      │          └─Declaration
      │            ├─Ident: b
      │            ├─Type: Int
      │            └─Body: IntLit(2)
      └─ReturnValStm: CommaExpr : int
                      ├─Assignment
                      │ ├─Int
                      │ ├─Var(a) : Int
                      │ └─BinOp
                      │   ├─Int
                      │   ├─Lval
                      │   │ └─Var(a) : Int
                      │   ├─PLUS
                      │   └─Lval
                      │     └─Var(b) : Int
                      └─BinOp
                        ├─Int
                        ├─Lval
                        │ └─Var(a) : Int
                        ├─Mul
                        └─Lval
                          └─Var(b) : Int
Code generation successful!
Generated Code:
declare i64 @read_integer()
declare void @print_integer(i64)

define i64 @dolphin_main () {
 %b2 = alloca i64
 %a1 = alloca i64
 store i64 1, i64* %a1
 store i64 2, i64* %b2
 %a_val3 = load i64, i64* %a1
 %b_val4 = load i64, i64* %b2
 %tmp5 = add i64 %a_val3, %b_val4
 store i64 %tmp5, i64* %a1
 %a_val6 = load i64, i64* %a1
 %b_val7 = load i64, i64* %b2
 %tmp8 = mul i64 %a_val6, %b_val7
 ret i64 %tmp8
}

Test PASSED: Compiler succeeded as expected.

---------------------------------------
Found test file: assignment-07-passing-tests/test10.dlp
Test #8: assignment-07-passing-tests/test10.dlp
Running compiler: _build/default/driver.exe assignment-07-passing-tests/test10.dlp
Parsing successful!
AST:
Program
├─Function
│ ├─Name: increment
│ ├─Return Type: Int
│ ├─Parameters
│ │ └─Parameter
│ │   ├─x
│ │   └─Int
│ └─Body
│   └─ReturnValStm: BinOp
│                   ├─Lval
│                   │ └─Var(x)
│                   ├─PLUS
│                   └─IntLit(1)
├─Function
│ ├─Name: double_and_increment
│ ├─Return Type: Int
│ ├─Parameters
│ │ └─Parameter
│ │   ├─x
│ │   └─Int
│ └─Body
│   └─ReturnValStm: CommaExpr
│                   ├─Assignment
│                   │ ├─Var(x)
│                   │ └─BinOp
│                   │   ├─Lval
│                   │   │ └─Var(x)
│                   │   ├─Mul
│                   │   └─IntLit(2)
│                   └─Call
│                     ├─FunName: increment
│                     └─Args
│                       └─Lval
│                         └─Var(x)
└─Function
  ├─Name: main
  ├─Return Type: Int
  ├─Parameters
  └─Body
    ├─DeclStm: VarDecl
    │          └─Declaration
    │            ├─Ident: value
    │            ├─Type: Int
    │            └─Body: IntLit(3)
    ├─DeclStm: VarDecl
    │          └─Declaration
    │            ├─Ident: result
    │            ├─Type: Int
    │            └─Body: Call
    │                    ├─FunName: double_and_increment
    │                    └─Args
    │                      └─Lval
    │                        └─Var(value)
    └─ReturnValStm: Lval
                    └─Var(result)
Variables in environment:
  x 
Variables in environment:
  x 
Variables in environment:
  result 
  value 
Semantic analysis successful!
Typed AST:
Program
└─Functions
  ├─Function
  │ ├─Name: increment
  │ ├─Return Type: Int
  │ ├─Params
  │ │ └─x : Int
  │ └─Body
  │   └─ReturnValStm: BinOp
  │                   ├─Int
  │                   ├─Lval
  │                   │ └─Var(x) : Int
  │                   ├─PLUS
  │                   └─IntLit(1)
  ├─Function
  │ ├─Name: double_and_increment
  │ ├─Return Type: Int
  │ ├─Params
  │ │ └─x : Int
  │ └─Body
  │   └─ReturnValStm: CommaExpr : int
  │                   ├─Assignment
  │                   │ ├─Int
  │                   │ ├─Var(x) : Int
  │                   │ └─BinOp
  │                   │   ├─Int
  │                   │   ├─Lval
  │                   │   │ └─Var(x) : Int
  │                   │   ├─Mul
  │                   │   └─IntLit(2)
  │                   └─Call
  │                     ├─Int
  │                     ├─FunName: increment
  │                     └─Args
  │                       └─Lval
  │                         └─Var(x) : Int
  └─Function
    ├─Name: main
    ├─Return Type: Int
    ├─Params
    └─Body
      ├─DeclStm: VarDecl
      │          └─Declaration
      │            ├─Ident: value
      │            ├─Type: Int
      │            └─Body: IntLit(3)
      ├─DeclStm: VarDecl
      │          └─Declaration
      │            ├─Ident: result
      │            ├─Type: Int
      │            └─Body: Call
      │                    ├─Int
      │                    ├─FunName: double_and_increment
      │                    └─Args
      │                      └─Lval
      │                        └─Var(value) : Int
      └─ReturnValStm: Lval
                      └─Var(result) : Int
Param 'x' found with UID x and Type i64
Param 'x' found with UID x and Type i64
Code generation successful!
Generated Code:
declare i64 @read_integer()
declare void @print_integer(i64)

define i64 @increment (i64 %x) {
 %tmp1 = add i64 %x, 1
 ret i64 %tmp1
}

define i64 @double_and_increment (i64 %x) {
 %x3 = alloca i64
 %tmp2 = mul i64 %x, 2
 store i64 %tmp2, i64* %x3
 %x_val4 = load i64, i64* %x3
 %tmp5 = call i64 @increment (i64 %x_val4)
 ret i64 %tmp5
}

define i64 @dolphin_main () {
 %result7 = alloca i64
 %value6 = alloca i64
 store i64 3, i64* %value6
 %value_val8 = load i64, i64* %value6
 %tmp9 = call i64 @double_and_increment (i64 %value_val8)
 store i64 %tmp9, i64* %result7
 %result_val10 = load i64, i64* %result7
 ret i64 %result_val10
}

Test PASSED: Compiler succeeded as expected.

---------------------------------------
Found test file: assignment-07-passing-tests/test11.dlp
Test #9: assignment-07-passing-tests/test11.dlp
Running compiler: _build/default/driver.exe assignment-07-passing-tests/test11.dlp
Parsing successful!
AST:
Program
└─Function
  ├─Name: main
  ├─Return Type: Int
  ├─Parameters
  └─Body
    ├─DeclStm: VarDecl
    │          └─Declaration
    │            ├─Ident: x
    │            ├─Type: 
    │            └─Body: IntLit(0)
    ├─DeclStm: VarDecl
    │          └─Declaration
    │            ├─Ident: y
    │            ├─Type: 
    │            └─Body: IntLit(0)
    ├─ForStm
    │ ├─Init: ForInitExpr: Assignment
    │ │                    ├─Var(x)
    │ │                    └─IntLit(0)
    │ ├─Cond: BinOp
    │ │       ├─Lval
    │ │       │ └─Var(x)
    │ │       ├─Lt
    │ │       └─IntLit(5)
    │ ├─Update: CommaExpr
    │ │         ├─Assignment
    │ │         │ ├─Var(x)
    │ │         │ └─BinOp
    │ │         │   ├─Lval
    │ │         │   │ └─Var(x)
    │ │         │   ├─PLUS
    │ │         │   └─IntLit(1)
    │ │         └─Assignment
    │ │           ├─Var(y)
    │ │           └─BinOp
    │ │             ├─Lval
    │ │             │ └─Var(y)
    │ │             ├─PLUS
    │ │             └─IntLit(1)
    │ └─Body: CompoundStm
    │         └─CompoundStm
    │           ├─ExprStm: Call
    │           │          ├─FunName: print_integer
    │           │          └─Args
    │           │            └─Lval
    │           │              └─Var(x)
    │           └─ExprStm: Call
    │                      ├─FunName: print_integer
    │                      └─Args
    │                        └─Lval
    │                          └─Var(y)
    └─ReturnValStm: IntLit(0)
Variables in environment:
  y 
  x 
Semantic analysis successful!
Typed AST:
Program
└─Functions
  └─Function
    ├─Name: main
    ├─Return Type: Int
    ├─Params
    └─Body
      ├─DeclStm: VarDecl
      │          └─Declaration
      │            ├─Ident: x
      │            ├─Type: Int
      │            └─Body: IntLit(0)
      ├─DeclStm: VarDecl
      │          └─Declaration
      │            ├─Ident: y
      │            ├─Type: Int
      │            └─Body: IntLit(0)
      ├─ForStm
      │ ├─Init: ForInitExpr: Assignment
      │ │                    ├─Int
      │ │                    ├─Var(x) : Int
      │ │                    └─IntLit(0)
      │ ├─Cond: BinOp
      │ │       ├─Bool
      │ │       ├─Lval
      │ │       │ └─Var(x) : Int
      │ │       ├─Lt
      │ │       └─IntLit(5)
      │ ├─Update: CommaExpr : int
      │ │         ├─Assignment
      │ │         │ ├─Int
      │ │         │ ├─Var(x) : Int
      │ │         │ └─BinOp
      │ │         │   ├─Int
      │ │         │   ├─Lval
      │ │         │   │ └─Var(x) : Int
      │ │         │   ├─PLUS
      │ │         │   └─IntLit(1)
      │ │         └─Assignment
      │ │           ├─Int
      │ │           ├─Var(y) : Int
      │ │           └─BinOp
      │ │             ├─Int
      │ │             ├─Lval
      │ │             │ └─Var(y) : Int
      │ │             ├─PLUS
      │ │             └─IntLit(1)
      │ └─Body: CompoundStm
      │         └─CompoundStm
      │           ├─ExprStm: Call
      │           │          ├─Void
      │           │          ├─FunName: print_integer
      │           │          └─Args
      │           │            └─Lval
      │           │              └─Var(x) : Int
      │           └─ExprStm: Call
      │                      ├─Void
      │                      ├─FunName: print_integer
      │                      └─Args
      │                        └─Lval
      │                          └─Var(y) : Int
      └─ReturnValStm: IntLit(0)
test1Code generation successful!
Generated Code:
declare i64 @read_integer()
declare void @print_integer(i64)

define i64 @dolphin_main () {
 %y2 = alloca i64
 %x1 = alloca i64
 store i64 0, i64* %x1
 store i64 0, i64* %y2
 store i64 0, i64* %x1
 br label %for_cond3
for_cond3:
 %x_val7 = load i64, i64* %x1
 %tmp8 = icmp slt i64 %x_val7, 5
 br i1 %tmp8, label %for_body4, label %for_end6
for_body4:
 %x_val9 = load i64, i64* %x1
 call void @print_integer (i64 %x_val9)
 %y_val10 = load i64, i64* %y2
 call void @print_integer (i64 %y_val10)
 br label %for_update5
for_update5:
 %x_val11 = load i64, i64* %x1
 %tmp12 = add i64 %x_val11, 1
 store i64 %tmp12, i64* %x1
 %y_val13 = load i64, i64* %y2
 %tmp14 = add i64 %y_val13, 1
 store i64 %tmp14, i64* %y2
 br label %for_cond3
for_end6:
 ret i64 0
}

Test PASSED: Compiler succeeded as expected.

=======================================
Test Summary for assignment-07-passing-tests:
Total Tests Run: 9
Passed Tests:    9
Failed Tests:    0
=======================================
=======================================
Overall Test Summary:
Total Failed Tests: 0
=======================================
